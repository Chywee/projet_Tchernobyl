import math
import matplotlib.pyplot as plt
import numpy as np
from scipy.integrate import solve_ivp

plt.style.use('seaborn-poster')

%matplotlib inline

F = lambda t, s: np.cos(t)

t_eval = np.arange(0, np.pi, 0.1)
sol = solve_ivp(F, [0, np.pi], [0], t_eval=t_eval)





or euler version


import numpy as np
import matplotlib.pyplot as plt

plt.style.use('seaborn-poster')
%matplotlib inline

# Define parameters
f = lambda t, s: np.exp(-t) # ODE
h = 0.1 # Step size
t = np.arange(0, 1 + h, h) # Numerical grid
s0 = -1 # Initial Condition

# Explicit Euler Method
s = np.zeros(len(t))
s[0] = s0

for i in range(0, len(t) - 1):
    s[i + 1] = s[i] + h*f(t[i], s[i])






or lesson's method 


import numpy as np
import matplotlib.pyplot as plt
def euler(derivatives, x, y, x_stop, h):
X = [x]
Y = [y]
while x < x_stop:
y = y + h * derivatives(x,y)
x = x + h
X.append(x)
Y.append(y)
return np.array(X), np.array(Y)







w/ explication 

#my version of edo solver
import numpy as np
import matplotlib
def euler (dérivé , x, y, h, x_stop) #imput ici les variable du systeme et dérivé décris la dérivé de la fct
    X = [x]
    Y = [y]
    while x < x_stop #condition
        y = y + h*(dérivé(x,y))
        X.append(x)
        Y.append(y)
    return np.array(X) , np.array(Y)
#definir mtn la fct du type f(x,v) ou f(v,a)
